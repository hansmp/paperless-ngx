# Generated by Django 4.2.16 on 2024-09-22 13:21

import logging
import re
from typing import TYPE_CHECKING

from django.db import migrations

if TYPE_CHECKING:
    from documents.models import StoragePath

logger = logging.getLogger("paperless.migrations")

regexOldSyntax_braces = r"((.?)({{1}([^{}]*?)}{1})(.?))"
regexNewSyntax_braces = r"({{2}([^{}]*?)}{2})"

regexSyntax_array = r"({(([^{}]*?)\[(\D*?)\]([^{}]*?))})"

###############################################################################


def updateToJinja2Templates(apps, schema_editor):
    # document: Document = apps.get_model("documents", "Document")
    updateStoragePathToJinja2(apps)
    return


###############################################################################


def downgradeToClassicTemplates(apps, schema_editor):
    downgradeStoragePathToClassicPythonString(apps)
    return


###############################################################################


def updateStoragePathToJinja2(apps):
    storagePaths = apps.get_model("documents", "StoragePath")

    logger.info("Upgrading StoragePath to Jinja2 template syntax")

    storagePath: StoragePath
    for storagePath in storagePaths.objects.all():
        logger.info(f"Handling storage path: {storagePath.path}")

        storagePath.path = upgradeBracesToJinja2Format(storagePath.path)
        storagePath.path = upgradeArrayAccessToJinja2Format(storagePath.path)
        logger.info(f"New storage path: {storagePath.path}")

        storagePath.save()

        logger.info("Done upgrading storage paths.")


###############################################################################


def downgradeStoragePathToClassicPythonString(apps):
    storagePaths = apps.get_model("documents", "StoragePath")

    logger.info("Downgrading StoragePath to classic python template syntax")
    logger.warning(
        "This operation is not fully supported! It will only work correctly for simple variable tags like {{foo}}!",
    )

    storagePath: StoragePath
    for storagePath in storagePaths.objects.all():
        logger.info(f"Handling storage path: {storagePath.path}")

        storagePath.path = downgradeBracesToPythonFormat(storagePath.path)
        storagePath.path = dongradeArrayAccessToPythonFormat(storagePath.path)
        logger.info(f"New storage path: {storagePath.path}")

        storagePath.save()

        logger.info("Done downgrading storage paths.")


###############################################################################


def upgradeBracesToJinja2Format(templateString: str):
    matches = re.findall(regexOldSyntax_braces, templateString)
    newTemplateString = templateString

    for match in matches:
        # handle single tag here
        logger.info(f"Found tag: {match[2]}")
        if (
            re.match(regexNewSyntax_braces, match[0]) is not None
        ):  # we need to check as the old syntax will fit in the new one!
            logger.info("Already jinja templated key.")
            continue

        logger.info("Upgrading to jinja2 syntax")
        newTemplateString = newTemplateString.replace(
            match[2],
            f"{{{{ {match[3].strip()} }}}}",
        )
    logger.info(
        f"Done upgrading braces from `{templateString}` to `{newTemplateString}`",
    )
    return newTemplateString


###############################################################################


def upgradeArrayAccessToJinja2Format(templateString: str):
    newTemplateString = templateString
    matches = re.findall(regexSyntax_array, templateString)

    for match in matches:
        # handle single tag here
        logger.info(f"Found tag: {match[0]}")
        if match[3].startswith("'") and match[3].endswith("'"):
            logger.info("Already jinja templated array access.")
            continue

        newAccess = f"{match[2]}['{match[3]}']{match[4]}"
        newTemplateString = newTemplateString.replace(
            match[1],
            newAccess,
        )

    logger.info(
        f"Done upgrading array access from `{templateString}` to `{newTemplateString}`",
    )
    return newTemplateString


###############################################################################


def downgradeBracesToPythonFormat(templateString: str):
    matches = re.findall(regexNewSyntax_braces, templateString)
    newTemplateString = templateString

    for match in matches:
        # handle single tag here
        logger.info(f"Found tag: {match[0]}")
        newTemplateString = newTemplateString.replace(
            match[0],
            f"{{{match[1].strip()}}}",
        )

    logger.info(
        f"Done downgrading braces from `{templateString}` to `{newTemplateString}`",
    )
    return newTemplateString


###############################################################################


def dongradeArrayAccessToPythonFormat(templateString: str):
    newTemplateString = templateString
    matches = re.findall(regexSyntax_array, templateString)

    for match in matches:
        # handle single tag here
        logger.info(f"Found tag: {match[0]}")
        logger.info(match)
        if not match[3].startswith("'") and not match[3].endswith("'"):
            logger.info("Already python templated array access.")
            continue

        newAccess = f"{match[2]}[{match[3].strip("' ")}]{match[4]}"
        newTemplateString = newTemplateString.replace(
            match[1],
            newAccess,
        )

    logger.info(
        f"Done downgrading array access from `{templateString}` to `{newTemplateString}`",
    )
    return newTemplateString


###############################################################################


class Migration(migrations.Migration):
    dependencies = [
        ("documents", "1052_document_transaction_id"),
    ]

    operations = [
        migrations.RunPython(updateToJinja2Templates, downgradeToClassicTemplates),
    ]
