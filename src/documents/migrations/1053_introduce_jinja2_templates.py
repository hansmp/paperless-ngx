# Generated by Django 4.2.16 on 2024-09-22 13:21

import logging
import re
from typing import TYPE_CHECKING

from django.db import migrations

if TYPE_CHECKING:
    from documents.models import StoragePath

logger = logging.getLogger("paperless.migrations")

regexOldSyntax = r"((.?)({{1}([^{}]*?)}{1})(.?))"
regexNewSyntax = r"({{2}([^{}]*?)}{2})"

###############################################################################


def updateToJinja2Templates(apps, schema_editor):
    # document: Document = apps.get_model("documents", "Document")
    updateStoragePathToJinja2(apps)
    return


###############################################################################


def downgradeToClassicTemplates(apps, schema_editor):
    downgradeStoragePathToClassicPythonString(apps)
    return


###############################################################################


def updateStoragePathToJinja2(apps):
    storagePaths = apps.get_model("documents", "StoragePath")

    logger.info("Upgrading StoragePath to Jinja2 template syntax")
    storagePath: StoragePath
    for storagePath in storagePaths.objects.all():
        logger.info(f"Handling storage path: {storagePath.path}")

        matches = re.findall(regexOldSyntax, storagePath.path)
        newStoragePath = storagePath.path

        for match in matches:
            # handle single tag here
            logger.info(f"Found tag: {match[2]}")
            if (
                re.match(regexNewSyntax, match[0]) is not None
            ):  # we need to check as the old syntax will fit in the new one!
                logger.info("Already jinja templated key.")
                continue
            logger.info("Upgrading to jinja2 syntax")
            newStoragePath = newStoragePath.replace(
                match[2],
                f"{{{{ {match[3].strip()} }}}}",
            )
        logger.info(f"New storage path: {newStoragePath}")

        storagePath.path = newStoragePath
        storagePath.save()

        logger.info("Done upgrading storage paths.")


###############################################################################


def downgradeStoragePathToClassicPythonString(apps):
    storagePaths = apps.get_model("documents", "StoragePath")

    logger.info("Downgrading StoragePath to classic python template syntax")
    logger.warning(
        "This operation is not fully supported! It will only work correctly for simple variable tags like {{foo}}!",
    )
    storagePath: StoragePath
    for storagePath in storagePaths.objects.all():
        logger.info(f"Handling storage path: {storagePath.path}")

        matches = re.findall(regexNewSyntax, storagePath.path)
        newStoragePath = storagePath.path

        for match in matches:
            # handle single tag here
            logger.info(f"Found tag: {match[0]}")
            newStoragePath = newStoragePath.replace(match[0], f"{{{match[1].strip()}}}")
        logger.info(f"New storage path: {newStoragePath}")

        storagePath.path = newStoragePath
        storagePath.save()

        logger.info("Done downgrading storage paths.")


###############################################################################


class Migration(migrations.Migration):
    dependencies = [
        ("documents", "1052_document_transaction_id"),
    ]

    operations = [
        migrations.RunPython(updateToJinja2Templates, downgradeToClassicTemplates),
    ]
